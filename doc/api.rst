
API
##############################


We provide different API's that might be used. At the moment all API's are based
on JSON objects.
A JSON object representing an element always has a 'type' and a 'name' key.
In addition there might be other keys depending on the query parameters (s. below).

There are the following protected keys:

* name                 <string>
* type                 <string>
* predecessors         <array>
* successors           <array>
* tags                 <object>
* parents              <array>
* children             <array>


GET API
================================

If an element has 'children', all these elementes i.e. children - objects are
stored under the key 'children' with their name (i.e. a reference to the object)
and not the object itself. The same applies for parents, successors,
predecessors.

The API can be accessed via:
http://host:port/API/element?id=X

Example:

.. code:: python

	{
  "children": [
    "load1",
    "bus3",
    "bus1",
    "bus2",
    "gen1",
    "line2",
    "line3",
    "line1"
  ],
  "element_id": 2,
  "name": "pypsa-test",
  "parents": [],
  "predecessors": [],
  "successors": [],
  "tags": {
    "model": "pypsa",
    "name": "pypsa-test",
    "type": "scenario"
  },
  "type": "scenario"
}



Advanced querying
------------------------

The output generated by a query is a JSON-file. Information and structure of this
output is determined by query parameters. The following query parameters exist

* expand   <object>
* children <boolean>
* parents  <boolean>
* tags     <boolean>
* geom     <boolean>
* hubs_as_elements <boolean>
* sequences <boolean>

**Example**

The following example shows a member of an API output from this query:

.. code:: bash

http://host:port/API/element?id=X&geom=false&tags=true&expand=children


The query member of api-parameters holds all information of the query. This will
we  provided when you receive data from the API. It will also be possible to set
these query parameters when you hand data over to the API.
Besides the queried element with all their expanded children, the JSON-output
file will contain the query parameter information:

.. code:: python

	{
	  "api_parameters": {
	    "api_version": "0.1",
	    "api_type": "element",
	    "query": {
	      "geom": "false",
	      "tags": "true",
	      "expand": "children",
	    },
	   "type"="scenario",
           "children" = [...]
         } 

The detailed description of the query parameters behaviour is given below.


expand
^^^^^^^^^^^^^^^^

If you do not want just a reference to a child, parent, successor or
predecessor, you can submit an additional query parameter 'expand'. Then the
values of the desired key will not be an array of strings containing just the
names, but it will be an array of the objects itself.

Example with expanded successors:

.. code:: bash

http://host:port/API/element?id=X&expand=successors

Note:

At the moment expand only works for one of the four names/keys (child, parent, successor,
predecessor) at the same time.


POST API
================================

Explicit vs. Implicit datasets
--------------------------------

To come...


Update datasets
--------------------------------

Datasets / scnearios can be updated. An the structure of a update dataset is 
given as an example below. The API will update all elements of a given 
scenario and the elements in 'element_names'. The updated values can be
'geom', 'sequences' and 'tags'.


.. code:: python

{
  "scenario": "scn_name",
  "update_type": "results",
  "update": [
    {
      "element_names": [
        "hub1",
        "hub2"
      ],
      "geom": "<GEOMETRY>",
      "sequences": {
        "key1": "value1",
        "key2": "value2"
      },
      "tags": {}
    },
    {
      "element_names": [
        "component1"
      ],
      "geom": "<GEOMETRY>",
      "sequences": {
        "key1": "value1"
      },
      "tags": {
        "installed_power": "100"
      }
    }
  ]
}





